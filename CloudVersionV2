import cv2
import cvzone
import numpy as np
import time
from cvzone.ColorModule import ColorFinder

#Calculate the distance between two given points
def distanceCalculate(p1, p2):
    #p1 and p2 in format (x1,y1) and (x2,y2) tuples
    dis = ((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2) ** 0.5
    return dis

#Calculate de Center of a contour polygon
def polygonCenter (contour):
    peri = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.02 * peri, True)
    x, y, w, h = cv2.boundingRect(approx)
    cx, cy = x + (w // 2), y + (h // 2)
    return cx, cy

#Pre Process Method
def coreIdentification(BRGimg):
    #Reding input image
    GRAYimg = cv2.cvtColor(BRGimg, cv2.COLOR_BGR2GRAY)
    #Apply threshold
    ret1,th1 = cv2.threshold(GRAYimg,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)
    #Invert mask
    th1 = cv2.bitwise_not(th1)
    #Pre Process
    contours, hierarchy = cv2.findContours(th1, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    cv2.drawContours(th1,contours, -1, color=(255,255,255),thickness=cv2.FILLED)
    minArea = 7000
    for i in range(len(contours)):
        cnt = contours[i]
        area = cv2.contourArea(cnt)
        if area < minArea:
            cv2.drawContours(th1,contours,i,color=(0,0,0),thickness=cv2.FILLED)

    #Checking if the contoures detected are actual cores
    mask2 = np.zeros((1944,1944 , 1), dtype = np.uint8)
    circles = cv2.HoughCircles(th1, cv2.HOUGH_GRADIENT, 1, 160, param1=50, param2=6, minRadius=110, maxRadius=160)

    #Getting rid of the not rounded contours
    contours, hierarchy1 = cv2.findContours(th1, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    if circles is not None:
        for (x,y,r ) in circles[0,:]:
            for i in range(len(contours)):
                cnt = contours[i]
                if 1 ==  cv2.pointPolygonTest(cnt,(x,y),False):
                    cv2.drawContours(mask2,contours,i,color=(255,255,255),thickness=cv2.FILLED)
    
    #Update found cores contours
    contours, hierarchy1 = cv2.findContours(mask2, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    
    cytoplasmIdentification (BRGimg, mask2, contours)

#Cytoplasm Identification
def cytoplasmIdentification (BRGimg, coreMask, cores):
    myColorFinder = ColorFinder(False)
    # Custom Color
    hsvVals = {'hmin': 14, 'smin': 29, 'vmin': 60, 'hmax': 180, 'smax': 255, 'vmax': 255}
    #Color Detection
    imgColor, mask = myColorFinder.update(BRGimg,hsvVals)

    contours, hierarchy = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    cv2.drawContours(mask,contours, -1, color=(255,255,255),thickness=cv2.FILLED)
    
    minArea = 7000
    for i in range(len(contours)):
        cnt = contours[i]
        area = cv2.contourArea(cnt)
        if area < minArea:
            cv2.drawContours(mask,contours,i,color=(0,0,0),thickness=cv2.FILLED)
    #diff2 = cv2.subtract(mask, coreMask)
    diff2=mask
    kernel = np.ones((5,5),np.uint8)
    diff2 = cv2.erode(diff2,kernel,iterations=1)

    contours, hierarchy = cv2.findContours(diff2, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

    cv2.drawContours(diff2,contours, -1, color=(255,255,255),thickness=cv2.FILLED)
    minArea = 70000
    for i in range(len(contours)):
        cnt = contours[i]
        area = cv2.contourArea(cnt)
        if area < minArea:
            cv2.drawContours(diff2,contours,i,color=(0,0,0),thickness=cv2.FILLED)
    #UpdateContours
    contours, hierarchy = cv2.findContours(diff2, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    kernel = np.ones((5,5),np.uint8)
    diff2 = cv2.dilate(diff2,kernel,iterations=1)
    contours, hierarchy = cv2.findContours(diff2, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

    #Blank mask
    mask2 = np.zeros((1944,1944 , 1), dtype = np.uint8)
    #Checking if the cytoplasm detected are atatch to a sutable core
    contours, hierarchy = cv2.findContours(diff2, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

    #Getting rid of not false macrophages identified
    for i in range(len(cores)):
        #Cores center
        cx, cy = polygonCenter(cores[i])
        for j in range(len(contours)):
            #Cytoplasm center
            x, y = polygonCenter(contours[j])
            if 200 > distanceCalculate((x,y),(cx,cy)):
                cv2.drawContours(mask2,contours,j,color=(255,255,255),thickness=cv2.FILLED)
                cv2.drawContours(mask2,cores,i,color=(255,255,255),thickness=cv2.FILLED)
    
    cv2.imwrite('MacropMask.jpg',mask2)
    
    processImage(mask2,BRGimg)

#Processing Images Method 2
def processImage(imgPre, BRGimg):
    print('\n'+"Macrophages Identification V2.1")
    #Finfing the Contours
    imgContours, conFound =  cvzone.findContours(BRGimg,imgPre,minArea=7000)
    #Defining what will be a macophag for us
    macrophages = 0
    if conFound:
        for contour in conFound:
            macrophages+=1
            peri = cv2.arcLength(contour['cnt'], True)
            approx = cv2.approxPolyDP(contour['cnt'], 0.02 * peri, True)
            area = contour['area']
            center = contour['center']
            print ("area: "+str(area)+'\n'+"center: "+str(center))
    print("total detected: "+str(macrophages))
    cv2.imwrite('Contours.jpg',imgContours)

path = 'L5_M2_C1.png'
img = cv2.imread(path,1)
coreIdentification(img)

#Bien Detectadas
#L3_M2_C12.png, L3_M2_C13.png, L5_M2_C1.png, L8_M1_C4.png, L9_M2_C3.png, L9_M2_C4.png, L19_M1_C4.png, L19_M2_C3.png, L28_M1_C4.png, L28_M1_C15.png
#hsvVals = {'hmin': 14, 'smin': 29, 'vmin': 60, 'hmax': 180, 'smax': 255, 'vmax': 255}

#L5_M1_C1.png, L17_M2_C2.png, L21_M2_C2.png
#No Detecta

#L19_M1_C1.png, L19_M1_C2.png, L24_M1_C1.png
#Detecta Incompleto

#L5_M1_C5.png. L19_M1_C5.png, L25_M1_C1.png, L28_M1_C11.png
#Detecta Mal